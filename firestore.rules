rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
    }

    function isProfileOwner(profileCollection, profileId) {
      return request.auth != null && exists(/databases/$(database)/documents/$(profileCollection)/$(profileId)) &&
             get(/databases/$(database)/documents/$(profileCollection)/$(profileId)).data.userRef == request.auth.uid;
    }
    
    function isTeamManager(teamId) {
        return request.auth != null && exists(/databases/$(database)/documents/teams/$(teamId)) &&
           get(/databases/$(database)/documents/teams/$(teamId)).data.managerId == request.auth.uid;
    }

    // --- Collections ---

    // Users can read their own data. Admins can read/write anything.
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin();
      allow write: if isAdmin();
      
      // Notifications are private to each user.
      match /notifications/{notificationId} {
        allow read, write, delete: if request.auth.uid == userId;
      }
    }
    
    // Profiles can be read by anyone, but only written by their owner or an admin.
    match /{profileCollection}/{profileId} where profileCollection in ['playerProfiles', 'managerProfiles', 'ownerProfiles', 'promoterProfiles', 'refereeProfiles'] {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if isProfileOwner(profileCollection, profileId) || isAdmin();
    }

    // Teams can be read by anyone. They can only be created by an authenticated user.
    // They can only be updated/deleted by their manager or an admin.
    match /teams/{teamId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if isTeamManager(teamId) || isAdmin();
    }

    // Invitations are private and can only be managed by the involved parties or an admin.
    match /teamInvitations/{invitationId} {
       allow read, create: if request.auth != null;
       allow update: if request.auth.uid == resource.data.playerId || request.auth.uid == resource.data.managerId || isAdmin();
       allow delete: if isAdmin();
    }
    
    match /matchInvitations/{invitationId} {
       allow read, create: if request.auth != null;
       allow update: if request.auth.uid == resource.data.playerId || request.auth.uid == resource.data.managerId || isAdmin();
       allow delete: if isAdmin();
    }

    // Pitches can be read by anyone. Create/Update/Delete by owner or admin.
    match /pitches/{pitchId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isProfileOwner('ownerProfiles', get(/databases/$(database)/documents/pitches/$(pitchId)).data.ownerRef) || isAdmin();
    }

    // Reservations can be read by anyone involved.
    match /reservations/{reservationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      // Only the actor (player/manager) or owner can update/delete.
      allow update, delete: if request.auth.uid == resource.data.actorId || isProfileOwner('ownerProfiles', resource.data.ownerProfileId) || isAdmin();
    }
    
    // Matches can be read by anyone. Write access is complex and managed by managers/admins.
    match /matches/{matchId} {
        allow read: if request.auth != null;
        allow create, update: if request.auth.uid == resource.data.managerRef || isAdmin();
        allow delete: if isAdmin();
        
        // MVP votes subcollection
        match /mvpVotes/{voteId} {
            allow read, create: if request.auth != null;
            allow update, delete: if isAdmin();
        }
    }

    // Payments can be managed by the involved parties.
    match /payments/{paymentId} {
        allow read: if request.auth.uid == resource.data.playerRef || request.auth.uid == resource.data.managerRef || isProfileOwner('ownerProfiles', resource.data.ownerRef) || isAdmin();
        allow create: if request.auth != null;
        // Only the payer can update their own payment (e.g. to "Paid").
        allow update: if request.auth.uid == resource.data.playerRef || request.auth.uid == resource.data.managerRef || isAdmin();
        allow delete: if isAdmin();
    }
    
    // Promos can be read by anyone, write by owner/admin.
    match /promos/{promoId} {
        allow read: if request.auth != null;
        allow create, update, delete: if isProfileOwner('ownerProfiles', resource.data.ownerProfileId) || isAdmin();
    }
    
    // Stripe customers collection is private
    match /customers/{uid} {
      allow read, write: if request.auth.uid == uid;
    }
  }
}
