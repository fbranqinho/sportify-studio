rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow authenticated users to read from any collection.
    // This is a broad rule to ensure the application can fetch necessary data for display.
    // Write rules below will maintain data integrity.
    match /{path=**} {
      allow read: if request.auth != null;
    }
    
    // USERS
    // Users can view any profile (covered by general read rule).
    // Users can only create their own user document and update their own document.
    match /users/{userId} {
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }
    
    // PROFILES (Player, Manager, Owner)
    // Anyone can read profiles.
    // Only the owner of the profile can create or update it.
    function isProfileOwner(profileCollection) {
      return request.auth.uid == resource.data.userRef;
    }
    match /playerProfiles/{profileId} {
      allow write: if isProfileOwner('playerProfiles');
    }
    match /managerProfiles/{profileId} {
      allow write: if isProfileOwner('managerProfiles');
    }
    match /ownerProfiles/{profileId} {
      allow write: if isProfileOwner('ownerProfiles');
    }

    // TEAMS
    // Only a manager can create a team.
    // Only the manager of a team can update it.
    match /teams/{teamId} {
      allow create: if request.auth.uid == request.resource.data.managerId;
      allow update: if get(/databases/$(database)/documents/teams/$(teamId)).data.managerId == request.auth.uid;
    }

    // TEAM & MATCH INVITATIONS
    // Only the invited player can accept/decline their own invitation.
    match /teamInvitations/{invitationId} {
      allow update: if request.auth.uid == resource.data.playerId;
    }
    match /matchInvitations/{invitationId} {
      allow update: if request.auth.uid == resource.data.playerId;
    }

    // PITCHES & PROMOS
    // Only the owner of the pitch/promo can write to it.
    function isPitchOwner(pitch) {
       return get(/databases/$(database)/documents/ownerProfiles/$(pitch.ownerRef)).data.userRef == request.auth.uid;
    }
     match /pitches/{pitchId} {
      allow create, update: if isPitchOwner(request.resource.data);
    }
    match /promos/{promoId} {
      allow create, update: if get(/databases/$(database)/documents/ownerProfiles/$(request.resource.data.ownerProfileId)).data.userRef == request.auth.uid;
    }

    // RESERVATIONS
    // Any authenticated user can create a reservation request.
    // The owner of the pitch can update (approve/reject) the reservation.
    match /reservations/{reservationId} {
      allow create: if request.auth.uid == request.resource.data.actorId;
      allow update: if get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid || request.auth.uid == resource.data.actorId;
      allow delete: if get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid;
    }

    // PAYMENTS
    // A user can create a payment for themselves.
    // A player can update their own payment (e.g., to 'Paid').
    // A manager can update payments related to their bookings.
    match /payments/{paymentId} {
       allow create: if request.auth.uid == request.resource.data.playerRef || request.auth.uid == request.resource.data.managerRef;
       allow update: if request.auth.uid == resource.data.playerRef || request.auth.uid == resource.data.managerRef;
    }

    // MATCHES
    // Complex rules for matches, allowing participants to update.
    function isMatchManager(matchData) {
      return request.auth.uid == matchData.managerRef;
    }
    function isTeamManager(teamId) {
        return get(/databases/$(database)/documents/teams/$(teamId)).data.managerId == request.auth.uid;
    }
    match /matches/{matchId} {
       // A manager creates a match via a reservation, so we check update rules.
       // Allow updates by the manager of teamA or teamB.
       allow create, update, delete: if 
            isMatchManager(resource.data) || 
            (resource.data.teamARef != null && isTeamManager(resource.data.teamARef)) ||
            (resource.data.teamBRef != null && isTeamManager(resource.data.teamBRef));
    }
    
    // MVP VOTES & NOTIFICATIONS
    // Users can vote on a match they participated in.
    // Users can update their own notifications (e.g., mark as read).
    match /matches/{matchId}/mvpVotes/{voteId} {
      allow create: if request.auth.uid == request.resource.data.voterId;
    }
    match /notifications/{notificationId} {
      allow create: if true; // Generated by server-side logic (in this case, app logic)
      allow update: if request.auth.uid == resource.data.userId;
    }
  }
}