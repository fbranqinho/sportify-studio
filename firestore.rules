
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isProfileOwner(profileId, profileCollection) {
        return request.auth != null && get(/databases/$(database)/documents/$(profileCollection)/$(profileId)).data.userRef == request.auth.uid;
    }

    match /{document=**} {
      allow read, write: if isAdmin();
    }

    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Nobody can list all users
      allow create: if true; // Anyone can sign up
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
    
    match /playerProfiles/{profileId} {
        allow get: if request.auth != null;
        allow list: if request.auth != null;
        allow create, update: if isProfileOwner(profileId, 'playerProfiles');
    }
    
    match /managerProfiles/{profileId} {
        allow get: if request.auth != null;
        allow list: if request.auth != null;
        allow create, update: if isProfileOwner(profileId, 'managerProfiles');
    }

    match /ownerProfiles/{profileId} {
        allow get: if request.auth != null;
        allow list: if request.auth != null;
        allow create, update: if isProfileOwner(profileId, 'ownerProfiles');
    }
    
    match /teams/{teamId} {
        allow read: if request.auth != null;
        allow create: if request.resource.data.managerId == request.auth.uid;
        allow update, delete: if get(/databases/$(database)/documents/teams/$(teamId)).data.managerId == request.auth.uid;
    }

    match /pitches/{pitchId} {
      allow read: if request.auth != null;
      allow create, update: if get(/databases/$(database)/documents/ownerProfiles/$(request.resource.data.ownerRef)).data.userRef == request.auth.uid;
    }

    match /reservations/{reservationId} {
      function isReservationOwner() {
        let res = get(/databases/$(database)/documents/reservations/$(reservationId)).data;
        return request.auth.uid == res.actorId;
      }
      function isPitchOwnerForReservation() {
        let res = get(/databases/$(database)/documents/reservations/$(reservationId)).data;
        let ownerProfile = get(/databases/$(database)/documents/ownerProfiles/$(res.ownerProfileId)).data;
        return request.auth.uid == ownerProfile.userRef;
      }
      
      allow read: if isReservationOwner() || isPitchOwnerForReservation();
      allow create: if isReservationOwner();
      allow update, delete: if isReservationOwner() || isPitchOwnerForReservation();
    }
    
    match /matches/{matchId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.managerRef;
        allow update, delete: if request.auth.uid == get(/databases/$(database)/documents/matches/$(matchId)).data.managerRef;
    }

    match /payments/{paymentId} {
        allow read, update: if request.auth.uid == resource.data.playerRef || request.auth.uid == resource.data.managerRef;
    }

    match /teamInvitations/{invitationId} {
      allow read, write: if request.auth.uid == resource.data.playerId || request.auth.uid == resource.data.managerId;
    }

    match /matchInvitations/{invitationId} {
        allow read, write: if request.auth.uid == resource.data.playerId || request.auth.uid == resource.data.managerId;
    }
    
    match /users/{userId}/notifications/{notificationId} {
      allow read, write, delete: if request.auth.uid == userId;
    }
    
    match /promos/{promoId} {
      allow read: if request.auth != null;
    }
  }
}
