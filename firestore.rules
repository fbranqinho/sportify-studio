rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isPlayer() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'PLAYER';
    }

    function isManager() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'MANAGER';
    }
    
    function isOwnerOfPitch() {
       return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'OWNER';
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS
    // Users can read any profile (to see names, etc.)
    // Users can only create their own user document and update their own.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }
    
    // PLAYER PROFILES
    // Anyone can read player profiles (for stats, etc.)
    // Only the player can create/update their own profile.
    match /playerProfiles/{profileId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn() && request.resource.data.userRef == request.auth.uid;
    }
    
    // MANAGER PROFILES
    // Anyone can read manager profiles.
    // Only the manager can create/update their own profile.
     match /managerProfiles/{profileId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn() && request.resource.data.userRef == request.auth.uid;
    }

    // OWNER PROFILES
    // Anyone can read owner profiles.
    // Only the owner can create/update their own profile.
    match /ownerProfiles/{profileId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn() && request.resource.data.userRef == request.auth.uid;
    }

    // TEAMS
    // Anyone can read team data.
    // Only a manager can create a team.
    // Only the assigned manager can update a team.
    match /teams/{teamId} {
      allow read: if isSignedIn();
      allow create: if isManager();
      allow update: if isManager() && get(/databases/$(database)/documents/teams/$(teamId)).data.managerId == request.auth.uid;
    }
    
    // PITCHES
    // Anyone can read pitch data.
    // Only an owner can create/update a pitch they own.
    match /pitches/{pitchId} {
      allow read: if isSignedIn();
      allow create: if isOwnerOfPitch();
      allow update: if isOwnerOfPitch() && getAfter(/databases/$(database)/documents/ownerProfiles/$(request.resource.data.ownerRef)).data.userRef == request.auth.uid;
    }
    
    // PROMOS
    // Anyone can read promotions.
    // Only an owner can create/update/delete a promo they own.
    match /promos/{promoId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isOwnerOfPitch() && getAfter(/databases/$(database)/documents/ownerProfiles/$(request.resource.data.ownerProfileId)).data.userRef == request.auth.uid;
    }

    // RESERVATIONS
    // Involved parties (player, manager, owner) can read.
    // Signed in users can create.
    // The owner can update (to confirm/cancel).
    match /reservations/{reservationId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn();
    }
    
    // NOTIFICATIONS
    // Users can read notifications intended for them.
    // Anyone can create a notification (server-side logic should be secure).
    match /notifications/{notificationId} {
      allow read, update: if isSignedIn() && (
        (resource.data.userId != null && resource.data.userId == request.auth.uid) ||
        (resource.data.ownerProfileId != null && get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid)
      );
      allow create: if isSignedIn();
    }
    
    // MATCHES
    // Anyone can read match data.
    // Only managers/players involved can update/create.
    match /matches/{matchId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn();
      
      // Anyone involved in the match can vote for MVP.
      match /mvpVotes/{voteId} {
          allow read, create: if isSignedIn();
      }
    }
    
    // INVITATIONS
    // Only involved parties can read/update invitations.
    match /teamInvitations/{invitationId} {
      allow read, create, update: if isSignedIn() && (request.auth.uid == resource.data.playerId || request.auth.uid == resource.data.managerId);
    }
     match /matchInvitations/{invitationId} {
      allow read, create, update: if isSignedIn() && (request.auth.uid == resource.data.playerId || request.auth.uid == resource.data.managerId);
    }
    
    // PAYMENTS
    // Only the user or owner involved can read/update the payment.
    match /payments/{paymentId} {
        allow read, update: if isSignedIn() && (
            (resource.data.playerRef != null && resource.data.playerRef == request.auth.uid) ||
            (resource.data.managerRef != null && resource.data.managerRef == request.auth.uid) ||
            (resource.data.ownerRef != null && get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerRef)).data.userRef == request.auth.uid)
        );
        allow create: if isSignedIn();
    }
  }
}