rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions to keep rules DRY
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return request.auth.uid == userId;
    }
    
    // --- GENERAL ACCESS RULES ---
    // By default, allow read access to any authenticated user for most collections.
    // This is simpler and often necessary for apps where data from multiple sources
    // needs to be displayed (e.g., seeing a team's name on a match card).
    // Write access is restricted on a per-collection basis below.
    match /{collection}/{docId} {
      allow read: if isAuthenticated();
      allow write: if false; // Deny writes by default, override below.
    }

    // --- COLLECTION-SPECIFIC WRITE RULES ---

    // Users can only create their own user document and can only update their own.
    // No one can delete user documents.
    match /users/{userId} {
      allow create: if isUser(userId);
      allow update: if isUser(userId);
      allow delete: if false; 
    }
    
    // Profiles can only be created/updated by the linked user.
    match /playerProfiles/{profileId} {
        allow write: if isUser(request.resource.data.userRef) || isUser(resource.data.userRef);
    }
    match /managerProfiles/{profileId} {
         allow write: if isUser(request.resource.data.userRef) || isUser(resource.data.userRef);
    }
    match /ownerProfiles/{profileId} {
         allow write: if isUser(request.resource.data.userRef) || isUser(resource.data.userRef);
    }

    // Teams can only be created/updated by the assigned manager.
    match /teams/{teamId} {
      allow create: if isUser(request.resource.data.managerId);
      allow update: if isUser(resource.data.managerId);
      // Add delete rule if managers should be able to delete teams
    }

    // Pitches can only be created/updated by the assigned owner.
    match /pitches/{pitchId} {
        allow create: if get(/databases/$(database)/documents/ownerProfiles/$(request.resource.data.ownerRef)).data.userRef == request.auth.uid;
        allow update: if get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerRef)).data.userRef == request.auth.uid;
       // Add delete rule if owners should be able to delete pitches
    }

    // Reservations can be created by any authenticated user.
    // They can only be updated/cancelled by the user who created it OR the owner of the pitch.
    match /reservations/{reservationId} {
      allow create: if isAuthenticated();
      allow update, delete: if isUser(resource.data.actorId) || 
                               get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid;
    }
    
    // Notifications can be created by anyone (server-side logic usually handles this).
    // A user can only update their own notifications (e.g., to mark as read).
    match /notifications/{notificationId} {
        allow create: if isAuthenticated();
        allow update: if isUser(resource.data.userId);
        allow delete: if isUser(resource.data.userId);
    }

    // Matches are complex. Let's allow creation/update by the manager for simplicity for now.
    match /matches/{matchId} {
      allow write: if isUser(resource.data.managerRef) || isUser(request.resource.data.managerRef);
    }
    
    // Payments are created by server/app logic, updated by the payer or manager.
    match /payments/{paymentId} {
      allow create: if isAuthenticated();
      allow update: if isUser(resource.data.playerRef) || isUser(resource.data.managerRef);
    }

    // Invitations can be written by the manager, updated by the invited player.
    match /teamInvitations/{invitationId} {
        allow create: if isUser(request.resource.data.managerId);
        allow update: if isUser(resource.data.playerId);
    }
    match /matchInvitations/{invitationId} {
        allow create: if isUser(request.resource.data.managerId);
        allow update: if isUser(resource.data.playerId);
    }
    
    // MVP votes can be created by a participant, but not read individually
    // to preserve anonymity until finalization.
    match /matches/{matchId}/mvpVotes/{voteId} {
        allow read: if false; // Nobody reads individual votes
        allow create: if isAuthenticated() && 
                       exists(/databases/$(database)/documents/matches/$(matchId)) &&
                       (request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.teamAPlayers ||
                        request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.teamBPlayers) &&
                       request.resource.data.voterId == request.auth.uid;
    }

  }
}
