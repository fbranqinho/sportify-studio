rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to get a document's data
    function getDoc(path) {
      return get(path).data;
    }
    
    // Helper function to check if a document exists
    function existsDoc(path) {
      return exists(path);
    }
    
    // Users can only read and update their own profile.
    // Allow read for any authenticated user to see names, etc.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if false; // Generally, don't allow users to delete their own accounts
    }
    
    // Profiles can be read by anyone, but only created/updated by the owner user.
    match /{profileCollection}/{profileId} where profileCollection in ['playerProfiles', 'managerProfiles', 'ownerProfiles', 'promoterProfiles', 'refereeProfiles'] {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && get(path(profileCollection, profileId)).data.userRef == request.auth.uid;
      allow delete: if false;
    }

    // Teams can be read by anyone.
    // Only the manager can update the team.
    match /teams/{teamId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.managerId == request.auth.uid;
      allow update: if isAuthenticated() && get(path('teams', teamId)).data.managerId == request.auth.uid;
      allow delete: if isAuthenticated() && get(path('teams', teamId)).data.managerId == request.auth.uid;
    }

    // Pitches can be read by anyone.
    // Only the owner can create/update/delete.
    match /pitches/{pitchId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAuthenticated() && get(path('ownerProfiles', request.resource.data.ownerRef)).data.userRef == request.auth.uid;
    }

    // Reservations:
    // Read: Owner of the pitch or creator of the reservation
    // Create: Any authenticated user
    // Update: Owner to confirm/cancel. User to cancel if allowed.
    match /reservations/{reservationId} {
        allow read: if isAuthenticated(); // Allow broader read access
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && 
                        (
                          // Owner can update to confirm/cancel
                          (existsDoc(path('ownerProfiles', getAfter(path('reservations', reservationId)).data.ownerProfileId)) && 
                           get(path('ownerProfiles', getAfter(path('reservations', reservationId)).data.ownerProfileId)).data.userRef == request.auth.uid) ||
                          // User who made the booking can cancel
                          isOwner(get(path('reservations', reservationId)).data.actorId)
                        );
        allow delete: if isAuthenticated() && isOwner(get(path('reservations', reservationId)).data.actorId);
    }
    
    // Anyone can read matches.
    // Only the manager can create/update the match.
    // Players can update to join/leave (covered by invitation rules).
    match /matches/{matchId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update: if isAuthenticated(); // Make this more permissive to allow batched writes from invitations
        allow delete: if isAuthenticated() && isOwner(get(path('matches', matchId)).data.managerRef);
    }

    // Invitations can be updated by the player who received it.
    match /teamInvitations/{invitationId} {
        allow read: if isAuthenticated() && (isOwner(get(path('teamInvitations', invitationId)).data.playerId) || isOwner(get(path('teamInvitations', invitationId)).data.managerId));
        allow create: if isAuthenticated(); // Manager creates this
        allow update, delete: if isAuthenticated() && isOwner(get(path('teamInvitations', invitationId)).data.playerId);
    }
    
    // Match invitations: A player can accept/decline. This needs to be coordinated with updating the match document.
    match /matchInvitations/{invitationId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated(); // Manager creates this
        allow update, delete: if isAuthenticated() && isOwner(get(path('matchInvitations', invitationId)).data.playerId);
    }
    
    // Notifications can be read/updated only by the recipient.
    match /notifications/{notificationId} {
        allow read, update, delete: if isAuthenticated() && (
                                        (get(path('notifications', notificationId)).data.userId != null && isOwner(get(path('notifications', notificationId)).data.userId)) ||
                                        (get(path('notifications', notificationId)).data.ownerProfileId != null && existsDoc(path('ownerProfiles', get(path('notifications', notificationId)).data.ownerProfileId)) && get(path('ownerProfiles', get(path('notifications', notificationId)).data.ownerProfileId)).data.userRef == request.auth.uid)
                                     );
        allow create: if isAuthenticated();
    }
    
    // Payments:
    // Read: involved parties (player, manager, owner).
    // Create: Manager or system.
    // Update: Player (to pay) or Manager/System (to update status).
    match /payments/{paymentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update: if isAuthenticated();
    }
    
    // Promos:
    // Read: anyone authenticated.
    // Write: only the owner.
    match /promos/{promoId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isAuthenticated() && 
                                        (existsDoc(path('ownerProfiles', request.resource.data.ownerProfileId)) && 
                                         get(path('ownerProfiles', request.resource.data.ownerProfileId)).data.userRef == request.auth.uid);
    }

    // MVP votes can be created by a match participant
    match /matches/{matchId}/mvpVotes/{voteId} {
      allow create: if isAuthenticated() && get(path('matches', matchId)).data.teamAPlayers.hasAny([request.auth.uid]) || get(path('matches', matchId)).data.teamBPlayers.hasAny([request.auth.uid]);
      allow read: if isAuthenticated();
    }

  }
}