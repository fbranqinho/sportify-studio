rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return request.auth.uid == userId;
    }
    
    function isManagerOfTeam(teamId) {
      let teamDoc = get(/databases/$(database)/documents/teams/$(teamId));
      return teamDoc.data.managerId == request.auth.uid;
    }

    function isPlayerInTeam(teamId, userId) {
      let teamDoc = get(/databases/$(database)/documents/teams/$(teamId));
      return userId in teamDoc.data.playerIds;
    }

    function isPlayerInvitedToMatch(matchId, userId) {
        return exists(/databases/$(database)/documents/matches/$(matchId)/matchInvitations/$(userId));
    }
    
    function isManagerOfMatch(matchId) {
        let matchDoc = get(/databases/$(database)/documents/matches/$(matchId));
        return matchDoc.data.managerRef == request.auth.uid;
    }

    function isOwnerOfPitch(pitchId) {
        let pitchDoc = get(/databases/$(database)/documents/pitches/$(pitchId));
        return get(/databases/$(database)/documents/ownerProfiles/$(pitchDoc.data.ownerRef)).data.userRef == request.auth.uid;
    }
    
    // --- Rules ---

    // Users: Can read any profile, but only write to their own.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow update: if isUser(userId);
      allow create: if !isSignedIn() || isUser(userId);
    }
    
    // Profiles (Player, Manager, Owner, etc.): Publicly readable, writable only by the owner user.
    match /{profileCollection}/{profileId} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn() && request.resource.data.userRef == request.auth.uid;
    }

    // Teams: Publicly readable. Writable only by the manager.
    match /teams/{teamId} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn() && isManagerOfTeam(teamId);
    }

    // Team Invitations: Readable by involved parties. Writable by player to accept/decline.
    match /teamInvitations/{invitationId} {
        allow read: if isSignedIn() && (isManagerOfTeam(resource.data.teamId) || isUser(resource.data.playerId));
        allow create: if isSignedIn() && isManagerOfTeam(request.resource.data.teamId);
        allow update: if isSignedIn() && isUser(request.resource.data.playerId);
    }

    // Matches: Readable by any signed-in user.
    // Writable by the manager of the game, or a player being added.
    match /matches/{matchId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn();
        // Allow manager to update, OR allow a player to be added (arrayUnion)
        allow update: if isSignedIn() && (isManagerOfMatch(matchId) || request.resource.data.diff(resource.data).affectedKeys().hasOnly(['teamAPlayers', 'teamBPlayers', 'playerApplications']));
    }
    
    // Match Invitations: Writable by player to accept/decline. Readable by player and manager.
    match /matches/{matchId}/matchInvitations/{invitationId} {
       allow read: if isSignedIn();
       allow create: if isSignedIn();
       allow update: if isSignedIn();
    }
    
    // MVP Votes: Writable by players in the match.
    match /matches/{matchId}/mvpVotes/{voteId} {
        allow create: if isSignedIn();
        allow read: if isSignedIn();
    }
    
    // Reservations: Readable by involved parties. Writable by creator or owner.
    match /reservations/{reservationId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.actorId == request.auth.uid;
      allow update, delete: if isSignedIn() && (
            get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid ||
            resource.data.actorId == request.auth.uid
        );
    }

    // Pitches: Publicly readable, writable by owner.
    match /pitches/{pitchId} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn() && isOwnerOfPitch(pitchId);
    }

    // Payments: Readable/writable by involved parties.
    match /payments/{paymentId} {
        allow read: if isSignedIn() && (
            isUser(resource.data.playerRef) || 
            isUser(resource.data.managerRef) || 
            get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerRef)).data.userRef == request.auth.uid
        );
        allow create, update: if isSignedIn(); // Simplified for now, relies on backend logic.
    }
    
    // Notifications: Writable by server/functions. Readable only by the target user.
    match /notifications/{notificationId} {
        allow read: if isSignedIn() && (isUser(resource.data.userId) || get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid);
        allow create: if isSignedIn(); // Allow app to create notifications
        allow update: if isSignedIn() && (isUser(resource.data.userId) || get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid);
    }
    
    // Promotions: Readable by all. Writable by owner.
    match /promos/{promoId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isSignedIn() && get(/databases/$(database)/documents/ownerProfiles/$(request.resource.data.ownerProfileId)).data.userRef == request.auth.uid;
    }
  }
}