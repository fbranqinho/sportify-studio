rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only read/write their own user document
    match /users/{userId} {
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid != null;
      
      // Allow users to manage their own notifications subcollection
      match /notifications/{notificationId} {
        allow read, write, delete: if request.auth.uid == userId;
      }
    }
    
    // Security rules for pitches
    match /pitches/{pitchId} {
      allow read: if request.auth.uid != null;
      allow write: if get(/databases/$(database)/documents/ownerProfiles/$(request.resource.data.ownerRef)).data.userRef == request.auth.uid;
    }

    // Security rules for teams
    match /teams/{teamId} {
        allow read: if request.auth.uid != null;
        // Only the manager can update the team
        allow update: if get(/databases/$(database)/documents/teams/$(teamId)).data.managerId == request.auth.uid;
        // Anyone authenticated can create a team
        allow create: if request.auth.uid != null;
    }

    // Security rules for reservations
    match /reservations/{reservationId} {
        // Any authenticated user can create a reservation
        allow create: if request.auth.uid != null;
        // Only the user who made the booking or the pitch owner can read it
        allow read: if request.auth.uid == resource.data.actorId || get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid;
        // The owner can confirm/update, the user who made it can cancel (update status to 'Canceled')
        allow update: if get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid || request.auth.uid == resource.data.actorId;
    }
    
    // Security rules for payments
    match /payments/{paymentId} {
        // Player can read their own payments, Manager/Owner can read payments associated with them
        allow read: if request.auth.uid == resource.data.playerRef || request.auth.uid == resource.data.managerRef || request.auth.uid == resource.data.ownerRef;
        // Player can pay (update status), Manager can create
        allow write: if request.auth.uid == resource.data.playerRef || request.auth.uid == resource.data.managerRef;
    }

    // Player profiles can be read by anyone, but only written by the player themselves
    match /playerProfiles/{profileId} {
        allow read: if request.auth.uid != null;
        allow write: if get(/databases/$(database)/documents/playerProfiles/$(profileId)).data.userRef == request.auth.uid;
    }
    
    // Owner profiles can be read by anyone, but only written by the owner themselves
    match /ownerProfiles/{profileId} {
        allow read: if request.auth.uid != null;
        allow write: if get(/databases/$(database)/documents/ownerProfiles/$(profileId)).data.userRef == request.auth.uid;
    }

    // Manager profiles can be read by anyone, but only written by the manager themselves
    match /managerProfiles/{profileId} {
        allow read: if request.auth.uid != null;
        allow write: if get(/databases/$(database)/documents/managerProfiles/$(profileId)).data.userRef == request.auth.uid;
    }
    
    // Invitations can be read by the involved parties (player, manager)
    match /teamInvitations/{invitationId} {
        allow read, write: if request.auth.uid == resource.data.playerId || request.auth.uid == resource.data.managerId;
    }

    // Match invitations can be read by the involved parties (player, manager)
    match /matchInvitations/{invitationId} {
        allow read, write: if request.auth.uid == resource.data.playerId || request.auth.uid == resource.data.managerId;
    }
    
    // Matches can be read by any authenticated user, but only updated by the manager
    match /matches/{matchId} {
      allow read: if request.auth.uid != null;
      allow update, delete: if get(/databases/$(database)/documents/matches/$(matchId)).data.managerRef == request.auth.uid;
    }

  }
}
