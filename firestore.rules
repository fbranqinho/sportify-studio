rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isAuthenticated() {
      return request.auth != null;
    }

    // --- Global Read Rule ---
    // Allow any authenticated user to read from any collection. This is safe for public data.
    // Sensitive data should be handled with more specific rules if added later.
    match /{path=**} {
      allow read: if isAuthenticated();
    }
    
    // --- Collection-Specific Write Rules ---

    // Users can only update their own user document.
    match /users/{userId} {
      allow create: if true; // Anyone can create a user account
      allow update: if isOwner(userId);
      allow delete: if false; // Users should not delete their accounts this way
    }
    
    // Profiles can only be created or updated by the associated user.
    match /playerProfiles/{profileId} {
        allow create, update: if isOwner(request.resource.data.userRef);
    }
    match /managerProfiles/{profileId} {
        allow create, update: if isOwner(request.resource.data.userRef);
    }
    match /ownerProfiles/{profileId} {
        allow create, update: if isOwner(request.resource.data.userRef);
    }

    // Teams can only be created/updated by their manager.
    match /teams/{teamId} {
        allow create: if isOwner(request.resource.data.managerId);
        allow update: if isOwner(resource.data.managerId);
    }

    // Pitches and promos can only be created/updated by their owner.
    match /pitches/{pitchId} {
        allow create, update: if get(/databases/$(database)/documents/ownerProfiles/$(request.resource.data.ownerRef)).data.userRef == request.auth.uid;
    }
    match /promos/{promoId} {
         allow create, update: if get(/databases/$(database)/documents/ownerProfiles/$(request.resource.data.ownerProfileId)).data.userRef == request.auth.uid;
    }
    
    // Reservations
    match /reservations/{reservationId} {
      allow create: if isAuthenticated(); // Any logged-in user can request
      // Owner or the user who made the booking can update/cancel
      allow update: if get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid || isOwner(resource.data.actorId);
      // Allow deletion only by the owner
      allow delete: if get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid;
    }
    
    // Match documents
    match /matches/{matchId} {
        // Only managers of the teams can update match details
        allow create: if isOwner(request.resource.data.managerRef);
        allow update: if isOwner(resource.data.managerRef) || (resource.data.teamBRef != null && get(/databases/$(database)/documents/teams/$(resource.data.teamBRef)).data.managerId == request.auth.uid) || request.auth.uid in resource.data.teamAPlayers || request.auth.uid in resource.data.teamBPlayers;
        // Only the manager who created the game can delete it
        allow delete: if isOwner(resource.data.managerRef);

        // Allow players to manage their MVP votes
        match /mvpVotes/{voteId} {
            allow create: if isOwner(request.resource.data.voterId);
            allow read: if isAuthenticated();
        }
    }
    
    // Team invitations can be created by a manager and responded to by the player.
    match /teamInvitations/{invitationId} {
      allow create: if isOwner(request.resource.data.managerId);
      allow update: if isOwner(resource.data.playerId); // Player can accept/decline
    }
    
    // Match invitations
    match /matchInvitations/{invitationId} {
        allow create: if isOwner(request.resource.data.managerId);
        allow update: if isOwner(resource.data.playerId);
    }
    
    // Payments
    match /payments/{paymentId} {
        allow create, update: if isAuthenticated(); // Allow any authenticated user to handle payments
    }
    
    // Notifications can be created by the system (or any user for now) but only read by the recipient.
    match /notifications/{notificationId} {
      allow create: if true; // System/app writes notifications
      allow read, update: if isOwner(resource.data.userId) || (resource.data.ownerProfileId != null && get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid);
    }
  }
}
