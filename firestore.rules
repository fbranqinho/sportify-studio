rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      // Check if the user document exists and if their role is 'ADMIN'
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
    }

    // Helper function para verificar se utilizador Ã© dono de um perfil
    function isProfileOwner(profileType, profileId) {
      return exists(/databases/$(database)/documents/$(profileType)/$(profileId)) &&
             get(/databases/$(database)/documents/$(profileType)/$(profileId)).data.userRef == request.auth.uid;
    }

    // --- Users & Profiles ---
    match /users/{userId} {
      allow read, write: if isAdmin() || request.auth.uid == userId;
    }

    match /playerProfiles/{profileId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isProfileOwner('playerProfiles', profileId) || isAdmin();
    }

    match /managerProfiles/{profileId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isProfileOwner('managerProfiles', profileId) || isAdmin();
    }

    match /ownerProfiles/{profileId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isProfileOwner('ownerProfiles', profileId) || isAdmin();
    }
    
    // --- Teams ---
    match /teams/{teamId} {
      allow read: if request.auth != null;
      allow create: if request.resource.data.managerId == request.auth.uid || isAdmin();
      allow update, delete: if get(/databases/$(database)/documents/teams/$(teamId)).data.managerId == request.auth.uid || isAdmin();
    }

    // --- Pitches ---
    match /pitches/{pitchId} {
      allow read: if request.auth != null;
      allow write: if isProfileOwner('ownerProfiles', request.resource.data.ownerRef) || isAdmin();
    }

    // --- Reservations ---
    match /reservations/{reservationId} {
      allow read: if isProfileOwner('ownerProfiles', get(/databases/$(database)/documents/reservations/$(reservationId)).data.ownerProfileId) ||
                     request.auth.uid == get(/databases/$(database)/documents/reservations/$(reservationId)).data.managerId ||
                     isAdmin();

      allow create: if request.auth.uid == request.resource.data.managerId || isAdmin();
      
      allow update, delete: if isProfileOwner('ownerProfiles', get(/databases/$(database)/documents/reservations/$(reservationId)).data.ownerProfileId) || isAdmin();
    }
    
    // --- Matches ---
    match /matches/{matchId} {
      allow read: if request.auth != null;
      allow write: if get(/databases/$(database)/documents/matches/$(matchId)).data.managerRef == request.auth.uid || isAdmin();
      allow create: if request.auth.uid == request.resource.data.managerRef || isAdmin();
    }

    // --- Payments ---
    match /payments/{paymentId} {
      allow read, write: if request.auth.uid == resource.data.playerRef ||
                            request.auth.uid == resource.data.managerRef ||
                            isProfileOwner('ownerProfiles', resource.data.ownerRef) ||
                            isAdmin();
    }

    // --- Invitations ---
    match /teamInvitations/{invitationId} {
      allow read, write: if request.auth.uid == resource.data.playerId || request.auth.uid == resource.data.managerId || isAdmin();
    }

    match /matchInvitations/{invitationId} {
      allow read, write: if request.auth.uid == resource.data.playerId || request.auth.uid == resource.data.managerId || isAdmin();
    }
    
    // --- Notifications (Subcollection) ---
    match /users/{userId}/notifications/{notificationId} {
      allow read, write, delete: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth != null; // Simplified for now, as checking sender is complex
    }
    
    // --- Promos ---
    match /promos/{promoId} {
      allow read: if request.auth != null;
      allow write: if isProfileOwner('ownerProfiles', request.resource.data.ownerRef) || isAdmin();
    }
    
    // --- MVP Votes (Subcollection) ---
    match /matches/{matchId}/mvpVotes/{voteId} {
        allow read: if request.auth != null;
        // Allow create if user participated in the match
        allow create: if get(/databases/$(database)/documents/matches/$(matchId)).data.playerIds.has(request.auth.uid) || isAdmin();
    }
  }
}