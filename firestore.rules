rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(docData) {
      return request.auth.uid == docData.userRef;
    }
    
    function isManager(teamData) {
        return request.auth.uid == teamData.managerId;
    }

    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow update: if isOwner(resource.data);
      allow create: if isUserAuthenticated();
    }
    
    match /{profileCollection}/{profileId} where profileCollection in ['playerProfiles', 'managerProfiles', 'ownerProfiles'] {
        allow read: if isUserAuthenticated();
        allow create: if isUserAuthenticated();
        allow update: if isOwner(resource.data);
    }

    match /teams/{teamId} {
      allow read, create: if isUserAuthenticated();
      allow update: if isManager(resource.data);
    }

    match /matches/{matchId} {
      allow read, get: if isUserAuthenticated();
      // A manager can create/update their own matches.
      allow create, delete: if request.auth.uid == request.resource.data.managerRef;
      // Allow a player to add themselves to the applications list or a manager to update it
      allow update: if request.auth.uid == resource.data.managerRef || request.auth.uid in request.resource.data.playerApplications;
    }

    match /reservations/{reservationId} {
      allow read, create: if isUserAuthenticated();
      // Only the user who made the reservation or the owner can update it
      allow update: if request.auth.uid == resource.data.actorId || get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid;
    }
    
    match /pitches/{pitchId} {
      allow read, create: if isUserAuthenticated();
      allow update: if get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerRef)).data.userRef == request.auth.uid;
    }

    match /teamInvitations/{invitationId} {
      allow read, create: if isUserAuthenticated();
      // The invited player can update their own invitation
      allow update: if request.auth.uid == resource.data.playerId;
    }

    match /matchInvitations/{invitationId} {
      allow read, create: if isUserAuthenticated();
      // The invited player can update their own invitation
      allow update: if request.auth.uid == resource.data.playerId || request.auth.uid == resource.data.managerId;
    }

    match /notifications/{notificationId} {
      allow read, write, create: if isUserAuthenticated();
    }

    match /payments/{paymentId} {
      allow read: if isUserAuthenticated();
      allow write: if request.auth.uid == resource.data.actorId || request.auth.uid == resource.data.playerRef || request.auth.uid == resource.data.managerRef;
    }
    
    match /promos/{promoId} {
        allow read, create, update, delete: if isUserAuthenticated();
    }
    
    match /matches/{matchId}/mvpVotes/{voteId} {
        allow read, create: if isUserAuthenticated();
    }
  }
}
