rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isManagerOfTeam(teamId) {
      return get(/databases/$(database)/documents/teams/$(teamId)).data.managerId == request.auth.uid;
    }

    function isPlayerInMatch(matchDoc) {
        return request.auth.uid in matchDoc.data.teamAPlayers || request.auth.uid in matchDoc.data.teamBPlayers;
    }
    
    function isManagerOfMatch(matchDoc) {
        let teamARef = matchDoc.data.teamARef;
        let teamBRef = matchDoc.data.teamBRef;
        return (teamARef != null && isManagerOfTeam(teamARef)) || (teamBRef != null && isManagerOfTeam(teamBRef));
    }


    // --- DEFAULT RULE ---
    // Deny all reads and writes by default. This is safer.
    match /{document=**} {
      allow read, write: if false;
    }

    // --- COLLECTION-SPECIFIC RULES ---

    // USERS: Read anyone's profile, but only write to your own.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow update: if isOwner(userId);
      allow create: if !isAuthenticated(); // For sign-ups
    }

    // PROFILES (Player, Manager, Owner etc.): Read anyone's, only owner can edit.
    match /{profileCollection}/{profileId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && request.resource.data.userRef == request.auth.uid;
    }

    // TEAMS: Read anyone's. Only manager can update. Only auth users can create.
    match /teams/{teamId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.managerId == request.auth.uid;
      allow update: if isAuthenticated() && isManagerOfTeam(teamId);
    }
    
    // TEAM INVITATIONS: Read by player or manager. Write by manager (create) or player (update).
    match /teamInvitations/{invitationId} {
      allow read, update: if isAuthenticated() && (isOwner(request.resource.data.playerId) || isOwner(request.resource.data.managerId));
      allow create: if isAuthenticated() && isOwner(request.resource.data.managerId);
    }

    // PITCHES: Read anyone's. Only owner can write.
    match /pitches/{pitchId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && get(/databases/$(database)/documents/ownerProfiles/$(request.resource.data.ownerRef)).data.userRef == request.auth.uid;
    }

    // PROMOS: Read anyone's. Only owner can write.
     match /promos/{promoId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && get(/databases/$(database)/documents/ownerProfiles/$(request.resource.data.ownerProfileId)).data.userRef == request.auth.uid;
    }

    // RESERVATIONS: Read by participants. Write by creator (player/manager) or owner.
    match /reservations/{reservationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(request.resource.data.actorId);
      allow update: if isAuthenticated() && (isOwner(request.resource.data.actorId) || get(/databases/$(database)/documents/ownerProfiles/$(request.resource.data.ownerProfileId)).data.userRef == request.auth.uid);
      allow delete: if isAuthenticated() && get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid;
    }
    
    // PAYMENTS: Can only be read/updated by participants.
    match /payments/{paymentId} {
      allow read, update: if isAuthenticated() && (isOwner(request.resource.data.playerRef) || isOwner(request.resource.data.managerRef) || get(/databases/$(database)/documents/ownerProfiles/$(request.resource.data.ownerRef)).data.userRef == request.auth.uid);
      allow create: if isAuthenticated();
    }

    // MATCHES: Read by anyone auth'd. Updates are more complex.
    match /matches/{matchId} {
      allow read: if isAuthenticated();
      
      // Allow creation if the reservation actor is creating it.
      allow create: if isAuthenticated();
      
      // Allow updates for specific scenarios
      allow update: if isAuthenticated() && (
        // A manager can update their game
        isManagerOfMatch(resource) ||
        // A player can be added to the roster (e.g. accepting an invite)
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['teamAPlayers']) && request.auth.uid in request.resource.data.teamAPlayers) ||
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['teamBPlayers']) && request.auth.uid in request.resource.data.teamBPlayers) ||
        // A player can add themselves to the application list
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['playerApplications']) && request.auth.uid in request.resource.data.playerApplications)
      );

      // Let any authenticated user create/read votes.
      match /mvpVotes/{voteId} {
        allow read, create: if isAuthenticated() && isPlayerInMatch(get(/databases/$(database)/documents/matches/$(matchId)));
      }
    }
    
    // MATCH INVITATIONS: Read/write by player or manager.
    match /matchInvitations/{invitationId} {
       allow read: if isAuthenticated() && (isOwner(request.resource.data.playerId) || isOwner(request.resource.data.managerId));
       // Allow player to accept/decline, or manager to create
       allow create: if isAuthenticated() && isOwner(request.resource.data.managerId);
       allow update: if isAuthenticated() && (isOwner(request.resource.data.playerId));
    }

    // NOTIFICATIONS: Only the target user/owner can interact with them.
    match /notifications/{notificationId} {
      allow read, update: if isAuthenticated() && (
        (resource.data.userId != null && isOwner(resource.data.userId)) ||
        (resource.data.ownerProfileId != null && get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid)
      );
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() && (
        (resource.data.userId != null && isOwner(resource.data.userId)) ||
        (resource.data.ownerProfileId != null && get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid)
      );
    }
  }
}