rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Funções auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }

    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isSelf(uid) {
      return request.auth.uid == uid;
    }

    // Default: negar tudo
    match /{document=**} {
      allow read, write: if false;
    }

    // Users
    match /users/{userId} {
      allow read, list: if isAuthenticated();
      allow create, update: if isSelf(userId);
      allow delete, write: if hasRole('ADMIN');

      // Notifications subcollection
      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Player Profiles
    match /playerProfiles/{profileId} {
      allow get, list: if isAuthenticated();
      allow create, update, delete: if isSelf(request.resource.data.userRef) || hasRole('ADMIN');
    }

    // Manager Profiles
    match /managerProfiles/{profileId} {
      allow get, list: if isAuthenticated();
      allow create, update, delete: if hasRole('MANAGER') || hasRole('ADMIN');
    }

    // Owner Profiles
    match /ownerProfiles/{profileId} {
      allow get, list: if isAuthenticated();
      allow create, update, delete: if hasRole('OWNER') || hasRole('ADMIN');
    }

    // Teams
    match /teams/{teamId} {
      allow read: if isAuthenticated();
      allow create, delete: if (hasRole('MANAGER') && isSelf(request.resource.data.managerId)) || hasRole('ADMIN');
      allow update: if
        (hasRole('MANAGER') && isSelf(resource.data.managerId)) || hasRole('ADMIN') ||
        (hasRole('PLAYER') && request.resource.data.playerIds.hasAll(resource.data.playerIds) &&
         request.resource.data.playerIds.hasAny([request.auth.uid]));
    }

    // Pitches
    match /pitches/{pitchId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if hasRole('OWNER') || hasRole('ADMIN');
    }

    // Promos
    match /promos/{promoId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if hasRole('OWNER') || hasRole('ADMIN');
    }

    // Reservations
    match /reservations/{reservationId} {
      allow read: if isAuthenticated();
      allow create: if hasRole('OWNER');
      allow update, delete: if hasRole('OWNER') || hasRole('ADMIN');
    }

    // Team Invitations
    match /teamInvitations/{invitationId} {
      allow read: if isAuthenticated();
      allow create, delete: if hasRole('MANAGER') || hasRole('ADMIN');
      allow update: if (hasRole('MANAGER') || hasRole('ADMIN')) ||
        (hasRole('PLAYER') && isSelf(resource.data.playerId) &&
         request.resource.data.diff(resource.data).changedKeys().hasOnly(['status', 'respondedAt']));
    }

    // Match Invitations
    match /matchInvitations/{invitationId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if hasRole('MANAGER') || hasRole('ADMIN');
    }

    // Matches
    match /matches/{matchId} {
      allow read: if isAuthenticated();
      allow create: if hasRole('MANAGER') && isSelf(request.resource.data.managerRef) || hasRole('ADMIN');
      allow update, delete: if
        (hasRole('MANAGER') && isSelf(resource.data.managerRef)) || hasRole('ADMIN') ||
        (hasRole('PLAYER') && (
          request.resource.data.playerApplications == resource.data.playerApplications.concat([request.auth.uid]) ||
          request.resource.data.teamAPlayers == resource.data.teamAPlayers.concat([request.auth.uid]) ||
          request.resource.data.teamBPlayers == resource.data.teamBPlayers.concat([request.auth.uid])
        ));

      // MVP Votes
      match /mvpVotes/{voteId} {
        allow create: if hasRole('PLAYER') &&
          (request.auth.uid in resource.data.teamAPlayers || request.auth.uid in resource.data.teamBPlayers) &&
          !exists(/databases/$(database)/documents/matches/$(matchId)/mvpVotes/$(request.auth.uid));
        allow read: if isAuthenticated();
      }
    }

    // -------------------------
    // Notifications
    // -------------------------
    match /users/{userId}/notifications {
      allow create: if isAuthenticated(); // qualquer utilizador pode criar
      allow read, update, delete: if isSelf(resource.data.userId) || isAdmin();
    }

    // -------------------------
    // Payments
    match /payments/{paymentId} {
      allow read: if isAuthenticated();
      allow write: if
        (hasRole('PLAYER') && isSelf(resource.data.playerRef)) ||
        (hasRole('MANAGER') && isSelf(resource.data.managerRef)) ||
        (hasRole('OWNER') && isSelf(get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerRef)).data.userRef)) ||
        hasRole('ADMIN');
    }

  }
}
