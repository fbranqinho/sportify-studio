rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Users can only read/write their own document
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Allow authenticated users to read public profiles
    match /playerProfiles/{profileId} {
        allow read: if isAuthenticated();
        allow create: if isOwner(request.resource.data.userRef);
        allow update: if isOwner(resource.data.userRef);
    }
    match /managerProfiles/{profileId} {
        allow read: if isAuthenticated();
        allow create: if isOwner(request.resource.data.userRef);
        allow update: if isOwner(resource.data.userRef);
    }
    match /ownerProfiles/{profileId} {
        allow read: if isAuthenticated();
        allow create: if isOwner(request.resource.data.userRef);
        allow update: if isOwner(resource.data.userRef);
    }

    // Teams can be read by anyone, but only modified by the manager
    match /teams/{teamId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(request.resource.data.managerId);
      allow update: if isOwner(resource.data.managerId);
    }

    // Pitches can be read by anyone, but only modified by their owner
    match /pitches/{pitchId} {
        allow read: if isAuthenticated();
        allow create: if get(/databases/$(database)/documents/ownerProfiles/$(request.resource.data.ownerRef)).data.userRef == request.auth.uid;
        allow update: if get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerRef)).data.userRef == request.auth.uid;
    }

    // Reservations can be read by anyone, but only created by an authenticated user
    // and updated/deleted by the involved parties (manager/player or owner)
    match /reservations/{reservationId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(request.resource.data.actorId);
      allow update: if isOwner(resource.data.actorId) || get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid;
      allow delete: if isOwner(resource.data.actorId) || get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid;
    }

    // Matches can be read by anyone, written by involved managers
    match /matches/{matchId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(request.resource.data.managerRef);
      // Allow update by the manager of team A or team B, or the original creator
      allow update: if isOwner(resource.data.managerRef) 
                      || (resource.data.teamARef != null && isOwner(get(/databases/$(database)/documents/teams/$(resource.data.teamARef)).data.managerId))
                      || (resource.data.teamBRef != null && isOwner(get(/databases/$(database)/documents/teams/$(resource.data.teamBRef)).data.managerId));
      allow delete: if isOwner(resource.data.managerRef);
    }

    // Invitations can be read by involved parties, and updated by the player or manager
    match /teamInvitations/{invitationId} {
      allow read: if isOwner(resource.data.playerId) || isOwner(resource.data.managerId);
      allow create: if isOwner(request.resource.data.managerId);
      allow update: if isOwner(resource.data.playerId) || isOwner(resource.data.managerId);
    }
    
    match /matchInvitations/{invitationId} {
      allow read: if isOwner(resource.data.playerId) || isOwner(resource.data.managerId);
      allow create: if isOwner(request.resource.data.managerId);
      allow update: if isOwner(resource.data.playerId);
    }

    // Notifications: Read/write access for the owner of the notification.
    match /notifications/{notificationId} {
      allow read, write: if isOwner(resource.data.userId) || (resource.data.ownerProfileId != null && get(/databases/$(database)/documents/ownerProfiles/$(resource.data.ownerProfileId)).data.userRef == request.auth.uid);
      allow create: if isAuthenticated();
    }
    
    // Payments can be read by any authenticated user, write is restricted.
    match /payments/{paymentId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(request.resource.data.playerRef) || isOwner(request.resource.data.managerRef);
    }

    // Promos can be read by anyone, only created/updated by the owner.
    match /promos/{promoId} {
      allow read: if isAuthenticated();
      allow create, update: if get(/databases/$(database)/documents/ownerProfiles/$(request.resource.data.ownerProfileId)).data.userRef == request.auth.uid;
    }
    
    // MVP votes can only be created by an authenticated user and are read-only after creation.
    match /matches/{matchId}/mvpVotes/{voteId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(request.resource.data.voterId);
      allow update, delete: if false;
    }
  }
}
