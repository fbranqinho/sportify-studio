rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function para verificar se o utilizador é o dono de um documento de perfil
    function isProfileOwner(profileType, profileId) {
      return exists(/databases/$(database)/documents/$(profileType)/$(profileId)) &&
             get(/databases/$(database)/documents/$(profileType)/$(profileId)).data.userRef == request.auth.uid;
    }

    // --- User & Profile Rules (Estas já estavam boas) ---
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update, delete: if request.auth.uid == userId;
    }
    match /playerProfiles/{profileId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isProfileOwner('playerProfiles', profileId);
    }
    match /managerProfiles/{profileId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isProfileOwner('managerProfiles', profileId);
    }
    match /ownerProfiles/{profileId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isProfileOwner('ownerProfiles', profileId);
    }
    
    // --- Regras de Aplicação Mais Seguras ---

    // Equipas (Teams)
    match /teams/{teamId} {
      // Qualquer utilizador autenticado pode ver os detalhes de uma equipa
      allow read: if request.auth != null;
      // Apenas um gestor pode criar uma equipa
      allow create: if request.resource.data.managerId == request.auth.uid;
      // Apenas o gestor da equipa pode editá-la ou apagá-la
      allow update, delete: if get(/databases/$(database)/documents/teams/$(teamId)).data.managerId == request.auth.uid;
    }

    // Campos (Pitches)
    match /pitches/{pitchId} {
      // Qualquer utilizador autenticado pode ver os campos
      allow read: if request.auth != null;
      // Apenas um proprietário verificado pode criar, editar ou apagar um campo
      allow write: if isProfileOwner('ownerProfiles', request.resource.data.ownerRef);
    }

    // Reservas (Reservations)
    match /reservations/{reservationId} {
      // Podem ler: o proprietário do campo, o gestor ou o jogador que fez a reserva
      allow read: if isProfileOwner('ownerProfiles', get(/databases/$(database)/documents/reservations/$(reservationId)).data.ownerProfileId) ||
                     request.auth.uid == get(/databases/$(database)/documents/reservations/$(reservationId)).data.actorId;
      // Pode criar: qualquer utilizador autenticado
      allow create: if request.auth.uid == request.resource.data.actorId;
      // Podem atualizar/apagar: o proprietário do campo ou o utilizador que fez a reserva
      allow update, delete: if isProfileOwner('ownerProfiles', get(/databases/$(database)/documents/reservations/$(reservationId)).data.ownerProfileId) ||
                               request.auth.uid == get(/databases/$(database)/documents/reservations/$(reservationId)).data.actorId;
    }
    
    // Jogos (Matches)
    match /matches/{matchId} {
        // Qualquer utilizador autenticado pode ver um jogo
        allow read: if request.auth != null;
        // Podem escrever: o gestor do jogo ou um jogador que está na lista de jogadores
        allow write: if request.auth.uid == get(/databases/$(database)/documents/matches/$(matchId)).data.managerRef ||
                        request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.teamAPlayers ||
                        request.auth.uid in get(/databases/$(database)/documents/matches/$(matchId)).data.teamBPlayers;
    }

    // Pagamentos (Payments)
    match /payments/{paymentId} {
      // Podem ler/escrever: o jogador a quem o pagamento pertence, ou o gestor da equipa associada
      allow read, write: if request.auth.uid == resource.data.playerRef ||
                            request.auth.uid == resource.data.managerRef;
    }

    // Convites (Invitations)
    match /teamInvitations/{invitationId} {
      // Podem ler/escrever: o jogador convidado ou o gestor que enviou o convite
      allow read, write: if request.auth.uid == resource.data.playerId || request.auth.uid == resource.data.managerId;
    }
    match /matchInvitations/{invitationId} {
      // Podem ler/escrever: o jogador convidado ou o gestor que enviou o convite
      allow read, write: if request.auth.uid == resource.data.playerId || request.auth.uid == resource.data.managerId;
    }
    
    // Notificações (são subcoleções de um utilizador)
    match /users/{userId}/notifications/{notificationId} {
      // Apenas o próprio utilizador pode aceder às suas notificações
      allow read, write, delete: if request.auth.uid == userId;
    }
    
    // Promoções (Promos)
    match /promos/{promoId} {
       // Qualquer utilizador pode ler as promoções
       allow read: if request.auth != null;
       // Apenas o proprietário do perfil associado pode criar/editar/apagar
       allow write: if isProfileOwner('ownerProfiles', request.resource.data.ownerProfileId);
    }
  }
}